
**
** Ip​=ka​⋅Ia​+kd​⋅Id​⋅(N⋅L)+ks​⋅Is​⋅(R⋅V)n
** 
** ka​⋅Ia see get_ambient_diffusion
** 
** where:
** 
**     IpIp​ is the intensity of the reflected light.
**     kaka​, kdkd​, and ksks​ are the ambient, diffuse, and specular reflection coefficients, respectively.
**     IaIa​, IdId​, and IsIs​ are the intensities of the ambient, diffuse, and specular light, respectively.
**     NN is the normalized surface normal.
**     LL is the normalized direction vector from the hit point to the light source.
**     RR is the normalized reflection vector.
**     VV is the normalized direction vector from the hit point to the viewer.
**     nn is the shininess exponent.



** Phong Reflection:
** L = Ambient_Light + Diffusion + Specular
** 
** Ambient Light:
** L = Colour (object colour) * Amb_light_factor
** 
** Difusion:
** dotLN = dot(norm(light_pos - hit_point), surfaceNormal(hit_point))
** light_colour = light_colour * light_ratio(if this doesnt look good, try obj col)
** L = Diffusion_factor (0, 1) * dotLN * light_colour
** 
** Specular:
** vec3 R = reflect(norm(light_pos - hit_point), surface_normal);
** vec  V = direction_to_cam (reversed ray direction);
**      dotRV = dot(R, V);
** float alpha = 10.;
** L = Spec_factor(0, 1) * pow(dotRV, alpha) * colour_of_choice(light colour or object colour)
** 
** Reflect:
** R = 2 * (light_dir(normalized) * surface_normal) * Surface_normal - light_dir(normalized);
** 
** 
** 
** 
**  vec3 p = ro + rd * d; // point on surface found by ray marching
**       vec3 normal = calcNormal(p); // surface normal
** 
**       // light
**       vec3 lightPosition = vec3(-8, -6, -5);
**       vec3 lightDirection = normalize(lightPosition - p);
** 
**       // ambient
**       float k_a = 0.6;
**       vec3 i_a = vec3(0.7, 0.7, 0);
**       vec3 ambient = k_a * i_a;
** 
**       // diffuse
**       float k_d = 0.5;
**       float dotLN = clamp(dot(lightDirection, normal), 0., 1.);
**       vec3 i_d = vec3(0.7, 0.5, 0);
**       vec3 diffuse = k_d * dotLN * i_d;
** 
**       // specular
**       float k_s = 0.6;
**       float dotRV = clamp(dot(reflect(lightDirection, normal), -rd), 0., 1.);
**       vec3 i_s = vec3(1, 1, 1);
**       float alpha = 10.;
**       vec3 specular = k_s * pow(dotRV, alpha) * i_s;
** 
**       // final sphere color
**       col = ambient + diffuse + specular;


